WebSocketServer {
    _events: [Object: null prototype] { connection: [Function (anonymous)] },
    _eventsCount: 1,
    _maxListeners: undefined,
    _server: <ref *1> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype] {
        request: [Function],
        connection: [Function: connectionListener],
        listening: [Function: bound emit],
        error: [Function: bound emit],
        upgrade: [Function: upgrade]
      },
      _eventsCount: 5,
      _maxListeners: undefined,
      _connections: 4,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::8082',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 10,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 2700,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 9,
        [Symbol(triggerId)]: 1
      },
      [Symbol(kUniqueHeaders)]: null
    },
    _removeListeners: [Function: removeListeners],
    clients: Set(4) {
      WebSocket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        _binaryType: 'nodebuffer',
        _closeCode: 1006,
        _closeFrameReceived: false,
        _closeFrameSent: false,
        _closeMessage: <Buffer >,
        _closeTimer: null,
        _extensions: {},
        _paused: false,
        _protocol: '',
        _readyState: 1,
        _receiver: [Receiver],
        _sender: [Sender],
        _socket: [Socket],
        _autoPong: true,
        _isServer: true,
        [Symbol(kCapture)]: false
      },
      WebSocket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        _binaryType: 'nodebuffer',
        _closeCode: 1006,
        _closeFrameReceived: false,
        _closeFrameSent: false,
        _closeMessage: <Buffer >,
        _closeTimer: null,
        _extensions: {},
        _paused: false,
        _protocol: '',
        _readyState: 1,
        _receiver: [Receiver],
        _sender: [Sender],
        _socket: [Socket],
        _autoPong: true,
        _isServer: true,
        [Symbol(kCapture)]: false
      },
      WebSocket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        _binaryType: 'nodebuffer',
        _closeCode: 1006,
        _closeFrameReceived: false,
        _closeFrameSent: false,
        _closeMessage: <Buffer >,
        _closeTimer: null,
        _extensions: {},
        _paused: false,
        _protocol: '',
        _readyState: 1,
        _receiver: [Receiver],
        _sender: [Sender],
        _socket: [Socket],
        _autoPong: true,
        _isServer: true,
        [Symbol(kCapture)]: false
      },
      WebSocket {
        _events: [Object: null prototype],
        _eventsCount: 1,
        _maxListeners: undefined,
        _binaryType: 'nodebuffer',
        _closeCode: 1006,
        _closeFrameReceived: false,
        _closeFrameSent: false,
        _closeMessage: <Buffer >,
        _closeTimer: null,
        _extensions: {},
        _paused: false,
        _protocol: '',
        _readyState: 1,
        _receiver: [Receiver],
        _sender: [Sender],
        _socket: [Socket],
        _autoPong: true,
        _isServer: true,
        [Symbol(kCapture)]: false
      }
    },
    _shouldEmitClose: false,
    options: {
      allowSynchronousEvents: false,
      autoPong: true,
      maxPayload: 104857600,
      skipUTF8Validation: false,
      perMessageDeflate: false,
      handleProtocols: null,
      clientTracking: true,
      verifyClient: null,
      noServer: false,
      backlog: null,
      server: <ref *1> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        requestTimeout: 300000,
        headersTimeout: 60000,
        keepAliveTimeout: 5000,
        connectionsCheckingInterval: 30000,
        requireHostHeader: true,
        joinDuplicateHeaders: undefined,
        rejectNonStandardBodyWrites: false,
        _events: [Object: null prototype],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 4,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: true,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        highWaterMark: 16384,
        httpAllowHalfOpen: false,
        timeout: 0,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        _connectionKey: '6::::8082',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 10,
        [Symbol(http.server.connections)]: ConnectionsList {},
        [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
          _idleTimeout: 30000,
          _idlePrev: [TimersList],
          _idleNext: [Timeout],
          _idleStart: 2700,
          _onTimeout: [Function: bound checkConnections],
          _timerArgs: undefined,
          _repeat: 30000,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 9,
          [Symbol(triggerId)]: 1
        },
        [Symbol(kUniqueHeaders)]: null
      },
      host: null,
      path: null,
      port: null,
      WebSocket: <ref *2> [class WebSocket extends EventEmitter] {
        CONNECTING: 0,
        OPEN: 1,
        CLOSING: 2,
        CLOSED: 3,
        createWebSocketStream: [Function: createWebSocketStream],
        Server: [class WebSocketServer extends EventEmitter],
        Receiver: [class Receiver extends Writable],
        Sender: [class Sender],
        WebSocket: [Circular *2],
        WebSocketServer: [class WebSocketServer extends EventEmitter]
      }
    },
    _state: 0,
    [Symbol(kCapture)]: false
  } io






  WebSocketServer {
    _events: [Object: null prototype] { connection: [Function (anonymous)] },
    _eventsCount: 1,
    _maxListeners: undefined,
    _server: <ref *1> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype] {
        request: [Function],
        connection: [Function: connectionListener],
        listening: [Function: bound emit],
        error: [Function: bound emit],
        upgrade: [Function: upgrade]
      },
      _eventsCount: 5,
      _maxListeners: undefined,
      _connections: 3,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *1]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::8082',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 10,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 2700,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 9,
        [Symbol(triggerId)]: 1
      },
      [Symbol(kUniqueHeaders)]: null
    },
    _removeListeners: [Function: removeListeners],
    clients: Set(3) {
      WebSocket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        _binaryType: 'nodebuffer',
        _closeCode: 1006,
        _closeFrameReceived: false,
        _closeFrameSent: false,
        _closeMessage: <Buffer >,
        _closeTimer: null,
        _extensions: {},
        _paused: false,
        _protocol: '',
        _readyState: 1,
        _receiver: [Receiver],
        _sender: [Sender],
        _socket: [Socket],
        _autoPong: true,
        _isServer: true,
        [Symbol(kCapture)]: false
      },
      WebSocket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        _binaryType: 'nodebuffer',
        _closeCode: 1006,
        _closeFrameReceived: false,
        _closeFrameSent: false,
        _closeMessage: <Buffer >,
        _closeTimer: null,
        _extensions: {},
        _paused: false,
        _protocol: '',
        _readyState: 1,
        _receiver: [Receiver],
        _sender: [Sender],
        _socket: [Socket],
        _autoPong: true,
        _isServer: true,
        [Symbol(kCapture)]: false
      },
      WebSocket {
        _events: [Object: null prototype],
        _eventsCount: 1,
        _maxListeners: undefined,
        _binaryType: 'nodebuffer',
        _closeCode: 1006,
        _closeFrameReceived: false,
        _closeFrameSent: false,
        _closeMessage: <Buffer >,
        _closeTimer: null,
        _extensions: {},
        _paused: false,
        _protocol: '',
        _readyState: 1,
        _receiver: [Receiver],
        _sender: [Sender],
        _socket: [Socket],
        _autoPong: true,
        _isServer: true,
        [Symbol(kCapture)]: false
      }
    },
    _shouldEmitClose: false,
    options: {
      allowSynchronousEvents: false,
      autoPong: true,
      maxPayload: 104857600,
      skipUTF8Validation: false,
      perMessageDeflate: false,
      handleProtocols: null,
      clientTracking: true,
      verifyClient: null,
      noServer: false,
      backlog: null,
      server: <ref *1> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        requestTimeout: 300000,
        headersTimeout: 60000,
        keepAliveTimeout: 5000,
        connectionsCheckingInterval: 30000,
        requireHostHeader: true,
        joinDuplicateHeaders: undefined,
        rejectNonStandardBodyWrites: false,
        _events: [Object: null prototype],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 3,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: true,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        highWaterMark: 16384,
        httpAllowHalfOpen: false,
        timeout: 0,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        _connectionKey: '6::::8082',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 10,
        [Symbol(http.server.connections)]: ConnectionsList {},
        [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
          _idleTimeout: 30000,
          _idlePrev: [TimersList],
          _idleNext: [Timeout],
          _idleStart: 2700,
          _onTimeout: [Function: bound checkConnections],
          _timerArgs: undefined,
          _repeat: 30000,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 9,
          [Symbol(triggerId)]: 1
        },
        [Symbol(kUniqueHeaders)]: null
      },
      host: null,
      path: null,
      port: null,
      WebSocket: <ref *2> [class WebSocket extends EventEmitter] {
        CONNECTING: 0,
        OPEN: 1,
        CLOSING: 2,
        CLOSED: 3,
        createWebSocketStream: [Function: createWebSocketStream],
        Server: [class WebSocketServer extends EventEmitter],
        Receiver: [class Receiver extends Writable],
        Sender: [class Sender],
        WebSocket: [Circular *2],
        WebSocketServer: [class WebSocketServer extends EventEmitter]
      }
    },
    _state: 0,
    [Symbol(kCapture)]: false
  } io